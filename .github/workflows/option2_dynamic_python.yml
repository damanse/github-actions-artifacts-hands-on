# .github/workflows/dynamic-matrix.yml
name: Option2 Dynamic Matrix Builder - Python

on:
  workflow_dispatch:
    inputs:
      config_json:
        description: 'JSON input like [{"id":"group1","hosts":["host1","host2"]}]'
        required: true
      start_time:
        description: 'Start time (UTC, e.g. 2025-05-12T15:00:00)'
        required: false
      end_time:
        description: 'End time (UTC, e.g. 2025-05-12T16:00:00)'
        required: false

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Parse config JSON and set matrix
        id: set-matrix
        run: |
          # Assume valid JSON input from workflow_dispatch
          echo '${{ github.event.inputs.config_json }}' > matrix.json

          # Minify it to ensure it's valid and compact (no newlines or extra spaces)
          MATRIX=$(jq -c '.' matrix.json)
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  run-groups:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.matrix) }}

    name: Run for ${{ matrix.id }}
    steps:
      # - name: Run hosts serially
      #   run: |
      #     echo "Running ID: ${{ matrix.id }}"
      #     index=1
      #     for host in ${{ join(matrix.hosts, ' ') }}; do
      #       echo ""
      #       echo "üîπ Step $index: Running task on host: $host"
      #       echo "-------------------------------------------"
      #       # Simulate task (replace with real logic)
      #       if [[ "$host" == "host4" ]]; then
      #         echo "‚ùå Simulated failure on $host"
      #         exit 1  # Optional: fail early
      #       fi
      #       echo "‚úÖ Finished processing $host"
      #       echo "-------------------------------------------"
      #       index=$((index + 1))
      #     done

      
      # - name: Run hosts serially (Python)
      #   run: |
      #     import sys
      
      #     id = "${{ matrix.id }}"
      #     hosts = ${{ toJson(matrix.hosts) }}
      
      #     print(f"üîß Running tasks for group: {id}")
      #     print("====================================")
      
      #     for index, host in enumerate(hosts, start=1):
      #         print(f"\nüîπ Step {index}: Processing host: {host}")
      #         print("----------------------------------------")
      
      #         try:
      #             # Simulate some work
      #             if host == "host2":
      #                 raise Exception(f"Simulated failure on {host}")
      #             print(f"‚úÖ Successfully processed {host}")
      #         except Exception as e:
      #             print(f"‚ùå Error on host {host}: {e}")
      #             sys.exit(1)  # Or skip failure with: `continue`
      
      #     print("\n‚úÖ All hosts processed.")
      #   shell: python

      # - name: Run hosts serially with retries (Python)
      #   run: |
      #     import sys
      #     import time
      
      #     id = "${{ matrix.id }}"
      #     hosts = ${{ toJson(matrix.hosts) }}
      
      #     print(f"üîß Running tasks for group: {id}")
      #     print("====================================")
      
      #     def process_host(host):
      #         # Simulate a task that might fail
      #         if host == "host2":
      #             raise Exception("Simulated failure")
      #         print(f"‚úÖ Task succeeded on {host}")
      
      #     failed_hosts = []
      
      #     for index, host in enumerate(hosts, start=1):
      #         print(f"\nüîπ Step {index}: Processing host: {host}")
      #         print("----------------------------------------")
      #         attempts = 0
      #         success = False
      
      #         while attempts < 3:
      #             try:
      #                 print(f"Attempt {attempts + 1} for host: {host}")
      #                 process_host(host)
      #                 success = True
      #                 break
      #             except Exception as e:
      #                 print(f"‚ö†Ô∏è Error on host {host}: {e}")
      #                 attempts += 1
      #                 if attempts < 3:
      #                     print("üîÅ Retrying...")
      #                     time.sleep(10)  # Optional delay between retries
      
      #         if not success:
      #             print(f"‚ùå Failed to process host {host} after 3 attempts.")
      #             failed_hosts.append(host)
      
      #     if failed_hosts:
      #         print(f"\n‚ùå Group '{id}' failed on the following hosts: {', '.join(failed_hosts)}")
      #         sys.exit(1)
      
      #     print("\n‚úÖ All hosts in group processed successfully.")
      #   shell: python

    - name: Run hosts serially with retries and time check (Python)
      run: |
        import sys
        import time
        import os
        from datetime import datetime, timezone
    
        # Inputs
        id = "${{ matrix.id }}"
        hosts = ${{ toJson(matrix.hosts) }}
        start_time_raw = "${{ github.event.inputs.start_time }}"
        end_time_raw = "${{ github.event.inputs.end_time }}"
    
        def parse_utc(timestamp):
            if not timestamp:
                return None
            return datetime.fromisoformat(timestamp).replace(tzinfo=timezone.utc)
    
        now = datetime.now(timezone.utc)
        start_time = parse_utc(start_time_raw)
        end_time = parse_utc(end_time_raw)
    
        # Enforce start time
        if start_time and now < start_time:
            print(f"‚è≥ Current time is before start_time ({start_time}), skipping.")
            sys.exit(0)
    
        print(f"üîß Running tasks for group: {id}")
        print(f"üïí Current time (UTC): {now.isoformat()}")
        print("====================================")
    
        def process_host(host):
            # Simulated task logic
            if host == "host4":
                raise Exception("Simulated failure")
            print(f"‚úÖ Task succeeded on {host}")
    
        failed_hosts = []
    
        for index, host in enumerate(hosts, start=1):
            if end_time and datetime.now(timezone.utc) > end_time:
                print(f"‚èπÔ∏è End time {end_time} reached. Aborting further processing.")
                sys.exit(1)
    
            print(f"\nüîπ Step {index}: Processing host: {host}")
            print("----------------------------------------")
            attempts = 0
            success = False
    
            while attempts < 3:
                try:
                    print(f"Attempt {attempts + 1} for host: {host}")
                    process_host(host)
                    success = True
                    break
                except Exception as e:
                    print(f"‚ö†Ô∏è Error on host {host}: {e}")
                    attempts += 1
                    if attempts < 3:
                        print("üîÅ Retrying...")
                        time.sleep(1)
    
            if not success:
                print(f"‚ùå Failed to process host {host} after 3 attempts.")
                failed_hosts.append(host)
    
        if failed_hosts:
            print(f"\n‚ùå Group '{id}' failed on the following hosts: {', '.join(failed_hosts)}")
            sys.exit(1)
    
        print("\n‚úÖ All hosts in group processed successfully.")
      shell: python





    
