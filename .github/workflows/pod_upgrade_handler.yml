name: Upgrade POD

on:
  workflow_call:
    inputs:
      pod:
        required: true
        type: string
      hosts:
        required: true
        type: string
      start_time:
        required: true
        type: string
      end_time:
        required: true
        type: string

jobs:
  upgrade-hosts:
    runs-on: ubuntu-latest
    timeout-minutes: 720
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        host: ${{ fromJson(inputs.hosts) }}
    name: Pod ${{ inputs.pod }} - Host ${{ matrix.host }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # - name: Check time window
      #   uses: ./.github/actions/time-window-check
      #   with:
      #     start_time: ${{ inputs.start_time }}
      #     end_time: ${{ inputs.end_time }}
      
      - name: ‚è∞ Check Time Window for ${{ matrix.host }}
        run: |
          echo "Checking time window..."
  
          python3 <<EOF
          from datetime import datetime
          import sys
          
          start_time_str = "${{ inputs.start_time }}"
          end_time_str = "${{ inputs.end_time }}"
          
          start = datetime.strptime(start_time_str, "%H:%M").time()
          end = datetime.strptime(end_time_str, "%H:%M").time()
          now = datetime.utcnow().time()  # Or use CET if needed
          
          print(f"Host: ${{ matrix.host }}")
          print(f"Start: {start}, End: {end}, Now: {now}")
          
          if not (start <= now <= end):
              print("‚õî Outside time window. Ending Upgrades.")
              sys.exit(1) 
          EOF
     


      - name: Run Upgrade on ${{ matrix.host }}
        id: upgrade
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
        run: |
          echo "Running upgrade script on ${{ matrix.host }}"
          echo "Checking Start and End time ${{ inputs.start_time }} - ${{ inputs.end_time }}"
          echo "Checking Big Red Button..."
          echo "Starting upgrade..."

          python3 <<EOF
          import subprocess
          import time
          import sys
          import random
          
          host = "${{ matrix.host }}"
          max_attempts = 3
          sleep_seconds = 5
          
          for attempt in range(1, max_attempts + 1):
              print(f"üîÅ Attempt {attempt} of {max_attempts} for host: {host}")
          
              try:
                  result = subprocess.run([
                      "ansible-playbook",
                      "playbooks/upgrade-playbook.yml",
                      "--extra-vars", f"target_host={host}"
                  ], check=True)
                  
                  print(f"‚úÖ Upgrade succeeded on attempt {attempt}")
                  sys.exit(0)
          
              except subprocess.CalledProcessError as e:
                  print(f"‚ùå Playbook failed on attempt {attempt} with code {e.returncode}")
                  if attempt < max_attempts:
                      print(f"‚è≥ Retrying in {sleep_seconds} seconds...")
                      time.sleep(sleep_seconds)
                  else:
                      print("üî• Upgrade failed after all retries.")
                      sys.exit(1)
          EOF
